// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This file is auto-generated by WSO2 Healthcare Team for managing utility functions.
// Developers are allowed modify this file as per the requirement.

import wso2healthcare/healthcare.fhir.r4;
import ballerina/log;
import ballerina/http;
import wso2healthcare/fhir;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type ExplanationOfBenefit r4:ExplanationOfBenefit|<other_ExplanationOfBenefit_Profile>;
public type ExplanationOfBenefit r4:ExplanationOfBenefit;

//add implemented profiles to this map. profileURL:implementation
isolated final map<ExplanationOfBenefitSourceConnect> profileImpl = {
    "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit": new InternationalExplanationofbenefitSourceConnect()
};

service / on new fhir:Listener(9090, apiConfig) {

    // Read the current state of the resource
    isolated resource function get fhir/r4/ExplanationOfBenefit/[string id](r4:FHIRContext fhirContext) returns @http:Payload {mediaType: ["application/fhir+json", "application/fhir+xml"]} map<json>|error|r4:FHIRError {

        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        log:printDebug(string `FHIR API request is received. Interaction: read,
            [resource]: \${resourceName.getResourceType().toBalString()}`);

        // Passing the Interaction processing to the r4 package with current context.
        r4:FHIRError? process = r4:processFHIRSourceConnections(srcConnectImpl, fhirContext);

        if process is error {
            log:printError("Error in source connection processing");
            return process;
        }

        log:printDebug("[END]FHIR interaction : read");
        return {};

    }
    // Search the resource type based on some filter criteria
    isolated resource function get fhir/r4/ExplanationOfBenefit(r4:FHIRContext fhirContext) returns @http:Payload {mediaType: ["application/fhir+json", "application/fhir+xml"]} map<json>|r4:FHIRError {

        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        r4:RequestSearchParameter[]? & readonly profileUrls = fhirContext.getRequestSearchParameter("_profile");
        log:printDebug(string `FHIR API request is received. Interaction: SEARCH, [profiles]: ${profileUrls.toBalString()}
            [resource]: ${resourceName.getResourceType().toBalString()}`);

        // Passing the Interaction processing to the r4 package with current context.
        r4:FHIRError? process = r4:processFHIRSourceConnections(srcConnectImpl, fhirContext);

        if process is error {
            log:printError("Error in source connection processing");
            return process;
        }

        log:printDebug("[END]FHIR interaction : search");
        return {};

    }
    // Create a new resource with a server assigned id
    isolated resource function post fhir/r4/ExplanationOfBenefit(r4:FHIRContext fhirContext, r4:ExplanationOfBenefit payload) returns @http:Payload {mediaType: ["application/fhir+json", "application/fhir+xml"]} map<json>|error|r4:FHIRError {

        r4:FHIRRequest resourceName = <r4:FHIRRequest>fhirContext.getFHIRRequest();

        log:printDebug(string `FHIR API request is received. Interaction: create,
            [resource]: \${resourceName.getResourceType().toBalString()}`);

        // Passing the Interaction processing to the r4 package with current context.
        r4:FHIRError? process = r4:processFHIRSourceConnections(srcConnectImpl, fhirContext);

        if process is error {
            log:printError("Error in source connection processing");
            return process;
        }

        log:printDebug("[END]FHIR interaction : create");
        return {};

    }

}
