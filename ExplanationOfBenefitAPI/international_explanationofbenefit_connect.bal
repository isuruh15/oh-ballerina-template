// // Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by WSO2 Healthcare Team for implementing source system connections.
// Developers are allowed modify this file as per the requirement.

import ballerina/http;
import ballerina/log;
import ballerina/url;
import wso2healthcare/healthcare.fhir.r4;
import wso2healthcare/healthcare.fhir.r4.parser;

configurable string sourceSystem = "http://localhost:9595";

final string READ = sourceSystem.endsWith("/") ? "read/" : "/read/";
final string SEARCH = sourceSystem.endsWith("/") ? "search" : "/search";
final string CREATE = sourceSystem.endsWith("/") ? "create" : "/create";

final http:Client sourceEp = check new (sourceSystem);

public isolated class InternationalExplanationofbenefitSourceConnect {

    *ExplanationOfBenefitSourceConnect;
    isolated function profile() returns r4:uri {
        return "http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit";
    }

    isolated function read(string id, r4:FHIRContext fhirContext) returns ExplanationOfBenefit|r4:FHIRError {

        http:Response|http:ClientError res = sourceEp->get(READ + id);

        if (res is http:ClientError) {
            r4:FHIRError fhirError = r4:createFHIRError("Error occured when calling the source system.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
            return fhirError;
        } else {
            json|error payload = res.getJsonPayload();
            if (payload is error) {
                r4:FHIRError fhirError = r4:createFHIRError("Unable to extract JSON payload from the source response.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
                return fhirError;
            } else {

                log:printInfo("Incoming payload: " + payload.toBalString());
                r4:ExplanationOfBenefit fhirResource = <r4:ExplanationOfBenefit>check parser:parse(payload, r4:ExplanationOfBenefit);
                log:printInfo("Parsed payload status: " + fhirResource.status);
                return fhirResource;
            }
        }
    }

    isolated function search(map<r4:RequestSearchParameter[]> params, r4:FHIRContext fhirContext) returns r4:Bundle|ExplanationOfBenefit[]|r4:FHIRError {

        string encoded = "";
        do {
            encoded = check url:encode(params.toJsonString(), "UTF-8");
        } on fail var e {
            log:printError("error", e);
        }

        log:printInfo("Serialized param = " + encoded);
        log:printInfo("search executed");
        log:printInfo(params.toJsonString());

        http:Response|http:ClientError res = sourceEp->get(SEARCH + "?params=" + encoded);
        if (res is http:ClientError) {
            r4:FHIRError fhirError = r4:createFHIRError("Error occured when calling the source system.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
            return fhirError;
        } else {
            json|error payload = res.getJsonPayload();
            if (payload is error) {
                r4:FHIRError fhirError = r4:createFHIRError("Unable to extract JSON payload from the source response.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
                return fhirError;
            } else {
                if (payload is json[]) {
                    json[] payloadArray = <json[]>payload;
                    ExplanationOfBenefit[] fhirResources = [];
                    foreach json p in payloadArray {
                        json|error resObj = p.jsonResource;
                        r4:ExplanationOfBenefit fhirResource;
                        if resObj is json {
                            fhirResource = <r4:ExplanationOfBenefit>check parser:parse(resObj, r4:ExplanationOfBenefit);
                            fhirResources.push(fhirResource);
                        }
                    }
                    return fhirResources;
                } else {
                    r4:FHIRError fhirError = r4:createFHIRError("Did not get a JSON[] from the source.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
                    return fhirError;
                }
            }
        }
    }

    isolated function create(r4:FHIRResourceEntity resourceEntity, r4:FHIRContext fhirContext) returns string|r4:FHIRError {

        //Implement source system connection here and persist FHIR resource.
        //Must respond with ID in order to create Location header

        r4:FHIRError fhirError = r4:createFHIRError("Not implemented", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION, httpStatusCode = 415);
        return fhirError;
    }

}
