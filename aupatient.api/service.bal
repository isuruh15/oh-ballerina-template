// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This file is auto-generated by WSO2 Healthcare Team for managing utility functions.
// Developers are allowed modify this file as per the requirement.

import ballerinax/health.fhir.r4 as r4;
import ballerinax/health.fhirr4 as fhir;
import ballerina/log;
import ballerina/http;
import ballerinax/health.fhir.r4.aubase410 as aubase;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Patient aubase:AUBasePatient|<other_Patient_Profile>;
public type Patient aubase:AUBasePatient;

service / on new fhir:Listener(9090, apiConfig) {

    // Read the current state of the resource represented by the given id.
    isolated resource function get fhir/r4/Patient/[string id](r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    Patient|r4:FHIRError {

        // Populate FHIR resource here and return
        return {};
    }

    // Read a specific version of the resource represented by the given id.
    isolated resource function get fhir/r4/Patient/[string id]/_history/[string v_id](r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    Patient|r4:FHIRError {

        // Populate FHIR resource here and return
        return {};
    }

    // Update/Create a new version of the resource represented by the given id.
    isolated resource function put fhir/r4/Patient/[string id](r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    Patient|r4:FHIRError {

        // Perform update operation here. If id is not present perform create operation.
        // return the updated/created resource. 
        // if updated, status code has to be 200(@http:Ok)
        // if created, status code has to be 201(@http:Created)
        return {};
    }

    // Patch a resource represented by the given id.
    isolated resource function patch fhir/r4/Patient/[string id](r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    Patient|r4:FHIRError {

        // Perform patch operation here. If id is not present reject the PATCH with 404.
        return {};
    }

    // Delete a resource represented by the given id.
    isolated resource function delate fhir/r4/Patient/[string id](r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    Patient|r4:FHIRError {

        // Perform delete operation here. The following options are available for returning.
        // return the deleted resource. status code has to be 200(@http:Ok)
        // return nothing with status code 204(@http:NoContent)
        // return nothing with status code 202(@http:Accepted)

        return {};
    }

    // Create a new resource with a server assigned id
    isolated resource function post fhir/r4/Patient(r4:FHIRContext fhirContext,
            aubase:AUBasePatient payload)
    returns @http:Payload {mediaType: ["application/fhir+json"]} Patient|r4:FHIRError {

        // Perform create operation here.
        // return the created resource. status code has to be 201(@http:Created)
        // spec: SHALL also return a Location header which contains the new Logical Id and Version Id of the created resource version
        return {};
    }

    // Search the resource type based on some filter criteria
    isolated resource function get fhir/r4/Patient(r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    r4:Bundle|r4:FHIRError {
        // uncomment following to extract url encode the search parameters
        // string|r4:FHIRError encodedParams = r4:urlEncodeFhirSearchParameters(fhirContext.getRequestSearchParameters());

        // call the source system apis
        // create a FHIR bundle and populate it with the results
        // return the bundle
        return {};
    }

    // Read all version of the resource represented by the given id.
    isolated resource function get fhir/r4/Patient/[string id]/_history(r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    r4:Bundle|r4:FHIRError {

        // Populate FHIR resources here and add to a bundle
        // return the bundle with the 'type' set to 'history'
        return {};
    }

    // Read all version of a particular resource type.
    isolated resource function get fhir/r4/Patient/_history(r4:FHIRContext fhirContext)
    returns @http:Payload {mediaType: ["application/fhir+json"]}
    r4:Bundle|r4:FHIRError {

        // Populate FHIR resources here and add to a bundle
        // return the bundle with the 'type' set to 'history'
        return {};
    }

}
